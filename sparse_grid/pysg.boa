import math

class gridPoint:
  def __init__( self, index=None, domain=None):
    self.hv = [] # hierarchical value
    self.fv = [] # function value
    if index is None:
      self.pos = [] # position of grid point
    else:
      self.pos = self.pointPosition ( index, domain )

  def pointPosition ( self, index, domain=None ):
    coord = list ()
    if domain is None:
      for i in range ( len ( index ) ):
        coord.append ( index[i][1]/2.**index[i][0] )
    else:
      for i in range ( len ( index ) ):
        coord.append ( ( domain[i][1] - domain[i][0] ) \
          * index[i][1]/2.**index[i][0] + domain[i][0] )
    return coord

  def printPoint ( self ):
    if self.pos is []:
      pass
    else:
      out = ""
      for i in range ( len ( self.pos ) ):
        out += str ( self.pos[i] ) + "\t"
        print out

class sparseGrid:
  def __init__ ( self, dim=1, level=1 ):
    self.dim = dim
    self.level = level
    self.gP = {}
    self.indices = []
    self.domain = ( ( 0.0, 1.0 ), ) * dim
    self.action = ()

  def printGrid ( self ):
    print self.hSpace

  def evalAction ( self ):
    basis = ( self.evalPerDim[0][ self.hSpace[0] - 1 ][ 0 ], )
    value = self.evalPerDim[0][ self.hSpace[0] - 1 ][ 1 ]
    # compute index of nonzero basis function in hSpace and its value.
    for i in range ( 1, self.dim ):
      value *= self.evalPerDim[i] [ self.hSpace[i] - 1 ] [1]
      basis += ( self.evalPerDim[i] [ self.hSpace[i] - 1 ] [0], )
    self.value += self.gP[basis].hv * value

  def evalFunct ( self, x ):
    self.value = 0.0
    self.evalPerDim = [ ]
    for i in range ( self.dim ):
      self.evalPerDim.append ( [ ] )
      for j in range ( 1, self.level + 1 ):
        # which basis is nonzero on X for dim I and level J.
        pos = ( x[i] - self.domain[i][0] ) / ( self.domain[i][1] \
          - self.domain[i][0] )
        basis = int ( math.ceil ( pos*2**( j - 1)) * 2 - 1 )
        if basis == -1:
          basis = 1
          self.evalPerDim[i].append ( [ ( j, basis ) ] )
        else:
          self.evalPerDim[i].append ( [ ( j, basis ) ] )
          # value of this basis function on X[I].
        self.evalPerDim[i] [ j - 1].append ( evalBasis1D ( x[i], \
          self.evalPerDim[i][ j - 1 ][0], self.domain[i] ) )
    self.action = self.evalAction
    self.loopHierSpaces()
    return self.value

# go through the hierarchical subspaces of self.level

  def loopHierSpaces ( self ):
    for i in range ( 1, self.level + 1 ):
      self.hSpace = [ i ]
      self.loopHierSpacesRec ( self.dim-1, self.level - ( i - 1 ) )

  def loopHierSpacesRec ( self, dim, level ):
    if dim > 1:
      for i in range ( 1, level+1 ):
        self.hSpace.append ( i )
        self.loopHierSpacesRec ( dim - 1, level - ( i - 1 ) )
        self.hSpace.pop ( )
    else:
      for i in range ( 1, level + 1 ):
        self.hSpace.append ( i )
        self.action ( )
        self.hSpace.pop ( )

# fill self.gP with the points for the indices generated beforehand

  def generatePoints ( self ):
    self.indices = self.generatePointsRec ( self.dim, self.level )
    for i in range ( len ( self.indices ) ):
      self.gP[ self.indices[i] ] = gridPoint ( self.indices[i], self.domain )

  def generatePointsRec ( self, dim, level, akt_level=None ):
    basis_akt = list ( )
    if akt_level == None:
      akt_level = 1
    for i in range ( 1, 2**( akt_level ) + 1, 2 ):
      basis_akt.append ( ( akt_level, i ) )
    if dim == 1 and akt_level == level:
      return basis_akt
    elif dim == 1:
      basis_akt += self.generatePointsRec ( dim, level, akt_level + 1 )
      return basis_akt
    elif akt_level == level:
      return cross ( basis_akt, \
        self.generatePointsRec (dim - 1, level - akt_level + 1 ) )
    else:
      return cross ( basis_akt, self.generatePointsRec (dim - 1, \
        level - akt_level + 1 )) \
        + self.generatePointsRec ( dim, level, akt_level + 1 )

# conversion from nodal to hierarchical basis in one dimension

  def nodal2Hier1D ( self, node, i, j, dim ):
    left = ( i - 1, j/2 )
    right = ( i - 1, j/2 + 1 )
    while left[1]%2 == 0 and left[0] > 0:
      left = ( left[0] - 1, left[1] / 2 )
    while right[1]%2 == 0 and right[0] > 0:
      right = ( right[0] - 1, right[1] / 2 )
    if isinstance ( node[0], tuple ):
      preCurDim = node[0:dim]
      postCurDim = node[dim:len(node)+1]
      index = preCurDim + ( ( i, j ), ) + postCurDim
      left  = preCurDim + ( left,     ) + postCurDim
      right = preCurDim + ( right,    ) + postCurDim
    else:
      if dim == 0:
        index = ( ( i, j ), ) + ( node, )
        left =  ( left, )     + ( node, )
        right = ( right, )    + ( node, )
      else: #dim will be 1 otherwise in this case
        index = ( node, ) + ( ( i, j ), )
        left =  ( node, ) + ( left, )
        right = ( node, ) + ( right, )
    if left[dim][0] == 0:
      if right[dim][0] != 0:
        self.gP[index].hv -= 0.5 * self.gP[right].hv
    elif right[dim][0] == 0:
      self.gP[index].hv -= 0.5 * self.gP[left].hv
    else:
      self.gP[index].hv -= 0.5 * ( self.gP[left].hv + self.gP[right].hv )

# conversion from nodal to hierarchical basis

  def nodal2Hier ( self ):
    for i in range ( len ( self.indices ) ):
      self.gP[ self.indices[i]].hv = self.gP[ self.indices[i]].fv
    for d in range ( 0, self.dim ):
      for i in range ( self.level, 0, -1 ):
        indices = self.generatePointsRec ( self.dim - 1, self.level - i + 1 )
        for j in range ( 1, 2**i + 1, 2 ):
          for k in range ( len ( indices ) ):
            self.nodal2Hier1D( indices[k], i, j, d )

# compute cross-product of args

  def cross ( *args ):
    ans = [[]]
    for arg in args:
      ans = [ x + [y] for x in ans for y in arg ]
    ans2 = []
    for i in range ( len ( ans ) ):
      if isinstance ( ans [i][1][0], tuple ):
        dummy = ( ans[i][1][0], )
        for j in range ( 1, len ( ans[i][1] ) ):
          dummy = ( dummy [0:len(dummy)] ) + ( ans[i][1][j], )
        ans2.append ( ( ans[i][0], ) + dummy )
      else:
        ans2.append ( ( ans[i][0], ans[i][1] ) )
    return ans2

# evaluation of the basis functions in one dimension

  def evalBasis1D ( x, basis, interval=None ):
    if interval is None:
      return 1.0 - abs ( x * 2.0**basis[0] - basis[1] )
    else:
      pos = ( x - interval[0] ) / ( interval[1] - interval[0] )
      return 1.0 - abs ( pos * 2**basis[0] - basis[1] )


